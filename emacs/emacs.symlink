;; -*- mode: lisp -*-
;; PACKAGE MANAGER
(require 'package)

(add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/"))
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
(add-to-list 'package-archives '("melpa-stable" . "http://stable.melpa.org/packages/"))

(defun ensure-package-installed (&rest packages)
  "Assure every package is installed, ask for installation if itâ€™s not.

Return a list of installed packages or nil for every skipped package."
  (mapcar
   (lambda (package)
     (if (package-installed-p package)
	 nil
       (if (y-or-n-p (format "Package %s is missing. Install it? " package))
	   (package-install package)
	 package)))
   packages))

;; Make sure to have downloaded archive description.
(or (file-exists-p package-user-dir)
    (package-refresh-contents))

;; Activate installed packages
(package-initialize)

;; List packages here
(ensure-package-installed 'color-theme-solarized
			  'elpy
			  'evil
			  'flycheck
			  'helm)
			  
;; CONFIGURATION

;; Evil Mode (Vim Bindings)
(require 'evil)
(evil-mode t)

;; Org Mode
(require 'org)

;; Helm
(require 'helm-config)
(helm-mode 1)
(global-set-key (kbd "C-c h") 'helm-command-prefix)
(global-unset-key (kbd "C-x c"))

; Line Numbers
(global-linum-mode t)
(setq linum-format "%d ")

;; Backups - this stops backup cruft accumulating in folders
(setq
 backup-by-copying t ; won't overwrite symlinked files - most useful for .emacs!
 delete-old-versions t
 kept-new-versions 6
 kept-old-versions 2
 version-control t
 backup-directory-alist
 `((".*" . ,temporary-file-directory))) ; put that shit in /tmp or something

(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t))) ; also put this in temp

;; LANGUAGES

;; Python
; Enable Elpy
(elpy-enable)
; Use Flycheck
(when (require 'flycheck nil t)
  (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
  (add-hook 'elpy-mode-hook 'flycheck-mode))

;; COLOURS
(load-theme 'solarized t)
(set-frame-parameter nil 'background-mode 'dark)
(set-terminal-parameter nil 'background-mode 'dark)
(set-variable 'solarized-termcolors '256)
